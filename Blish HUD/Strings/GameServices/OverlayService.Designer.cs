//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blish_HUD.Strings.GameServices {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class OverlayService {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OverlayService() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Blish_HUD.Strings.GameServices.OverlayService", typeof(OverlayService).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Join our Discord.
        /// </summary>
        internal static string About_DiscordCallToAction_Button {
            get {
                return ResourceManager.GetString("About_DiscordCallToAction_Button", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  
        ///Need help or just want to
        ///participate in the conversation?.
        /// </summary>
        internal static string About_DiscordCallToAction_Question {
            get {
                return ResourceManager.GetString("About_DiscordCallToAction_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  
        ///The majority of Blish HUD&apos;s feedback, development, and other discussions take place in our.
        /// </summary>
        internal static string About_DiscordCallToAction1 {
            get {
                return ResourceManager.GetString("About_DiscordCallToAction1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discord.
        /// </summary>
        internal static string About_DiscordCallToAction2 {
            get {
                return ResourceManager.GetString("About_DiscordCallToAction2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  channel.
        /// .
        /// </summary>
        internal static string About_DiscordCallToAction3 {
            get {
                return ResourceManager.GetString("About_DiscordCallToAction3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ©2010-{0} ArenaNet, LLC. All rights reserved. Guild Wars, Guild Wars 2, Heart of Thorns,
        ///Guild Wars 2: Path of Fire, ArenaNet, NCSOFT, the Interlocking NC Logo, and all associated
        ///logos and designs are trademarks or registered trademarks of NCSOFT Corporation. All other
        ///trademarks are the property of their respective owners..
        /// </summary>
        internal static string AboutAnetNotice {
            get {
                return ResourceManager.GetString("AboutAnetNotice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Designed and built with all the love in Tyria by
        ///the Blish HUD team with help from many more!.
        /// </summary>
        internal static string AboutLoveMessage {
            get {
                return ResourceManager.GetString("AboutLoveMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        internal static string AboutSection {
            get {
                return ResourceManager.GetString("AboutSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///Blish HUD
        ///
        ///MIT License
        ///
        ///Copyright (c) 2022 Dade Lamkins
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject to the following conditions:
        ///
        ///The  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AboutThirdPartySoftware {
            get {
                return ResourceManager.GetString("AboutThirdPartySoftware", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Software Licences.
        /// </summary>
        internal static string AboutThirdPartySoftwareHeading {
            get {
                return ResourceManager.GetString("AboutThirdPartySoftwareHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connected to ArcDPS via bridge plugin..
        /// </summary>
        internal static string ConnectionStatus_ArcDPSBridge_Connected {
            get {
                return ResourceManager.GetString("ConnectionStatus_ArcDPSBridge_Connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No connection received from bridge.
        ///
        ///It might not be installed..
        /// </summary>
        internal static string ConnectionStatus_ArcDPSBridge_Disconnected {
            get {
                return ResourceManager.GetString("ConnectionStatus_ArcDPSBridge_Disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArcDPS Bridge.
        /// </summary>
        internal static string ConnectionStatus_ArcDPSBridge_Name {
            get {
                return ResourceManager.GetString("ConnectionStatus_ArcDPSBridge_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connected to MumbleLink with name &apos;{0}&apos;..
        /// </summary>
        internal static string ConnectionStatus_Mumble_Connected {
            get {
                return ResourceManager.GetString("ConnectionStatus_Mumble_Connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to connect to MumbleLink with name &apos;{0}&apos;.
        ///
        ///Check what launch arguments were used
        ///to launch both Guild Wars 2 and Blish HUD..
        /// </summary>
        internal static string ConnectionStatus_Mumble_Disconnected {
            get {
                return ResourceManager.GetString("ConnectionStatus_Mumble_Disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MumbleLink.
        /// </summary>
        internal static string ConnectionStatus_Mumble_Name {
            get {
                return ResourceManager.GetString("ConnectionStatus_Mumble_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Home.
        /// </summary>
        internal static string HomeTab {
            get {
                return ResourceManager.GetString("HomeTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic HUD.
        /// </summary>
        internal static string OverlayDynamicHUDSection {
            get {
                return ResourceManager.GetString("OverlayDynamicHUDSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overlay Settings.
        /// </summary>
        internal static string OverlaySettingsSection {
            get {
                return ResourceManager.GetString("OverlaySettingsSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes in v{0}.
        /// </summary>
        internal static string SelfUpdate_ChangesInVersion {
            get {
                return ResourceManager.GetString("SelfUpdate_ChangesInVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Prerelease Available.
        /// </summary>
        internal static string SelfUpdate_NewPrereleaseAvailable {
            get {
                return ResourceManager.GetString("SelfUpdate_NewPrereleaseAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Release Available.
        /// </summary>
        internal static string SelfUpdate_NewUpdateAvailable {
            get {
                return ResourceManager.GetString("SelfUpdate_NewUpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Pending Updates.
        /// </summary>
        internal static string SelfUpdate_NoPendingUpdates {
            get {
                return ResourceManager.GetString("SelfUpdate_NoPendingUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to Check for Updates.
        /// </summary>
        internal static string SelfUpdate_PendingUpdatesQueryFailed {
            get {
                return ResourceManager.GetString("SelfUpdate_PendingUpdatesQueryFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading prerelease v{0}....
        /// </summary>
        internal static string SelfUpdate_Progress_DownloadingPrereleaseArchive {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_DownloadingPrereleaseArchive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading release v{0}....
        /// </summary>
        internal static string SelfUpdate_Progress_DownloadingReleaseArchive {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_DownloadingReleaseArchive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extracting new executable....
        /// </summary>
        internal static string SelfUpdate_Progress_ExtractingExecutable {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_ExtractingExecutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restarting....
        /// </summary>
        internal static string SelfUpdate_Progress_Restarting {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_Restarting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restarting in {0}....
        /// </summary>
        internal static string SelfUpdate_Progress_RestartingIn {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_RestartingIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verifying checksum....
        /// </summary>
        internal static string SelfUpdate_Progress_VerifyingChecksum {
            get {
                return ResourceManager.GetString("SelfUpdate_Progress_VerifyingChecksum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update to Prerelease v{0}.
        /// </summary>
        internal static string SelfUpdate_UpdateToPrereleaseMenuStripText {
            get {
                return ResourceManager.GetString("SelfUpdate_UpdateToPrereleaseMenuStripText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update to Release v{0}.
        /// </summary>
        internal static string SelfUpdate_UpdateToReleaseMenuStripText {
            get {
                return ResourceManager.GetString("SelfUpdate_UpdateToReleaseMenuStripText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the language used when displaying Blish HUD text and when requests are made to the GW2 web API..
        /// </summary>
        internal static string Setting_AppCulture_Description {
            get {
                return ResourceManager.GetString("Setting_AppCulture_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application &amp; API Language.
        /// </summary>
        internal static string Setting_AppCulture_DisplayName {
            get {
                return ResourceManager.GetString("Setting_AppCulture_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This determines the Audio output device used by Blish HUD. The Gw2OutputDevice adjusts itself to whatever GW2 is using..
        /// </summary>
        internal static string Setting_AudioDevice_Description {
            get {
                return ResourceManager.GetString("Setting_AudioDevice_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Audio Output Device.
        /// </summary>
        internal static string Setting_AudioDevice_DisplayName {
            get {
                return ResourceManager.GetString("Setting_AudioDevice_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closes Blish windows when focused and escape key is pressed.
        /// </summary>
        internal static string Setting_CloseWindowOnEscape_Description {
            get {
                return ResourceManager.GetString("Setting_CloseWindowOnEscape_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close Window on Escape.
        /// </summary>
        internal static string Setting_CloseWindowOnEscape_DisplayName {
            get {
                return ResourceManager.GetString("Setting_CloseWindowOnEscape_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls visibility during cut scenes and loading screens..
        /// </summary>
        internal static string Setting_DynamicHUDLoading_Description {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDLoading_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cut Scene / Loading Screen.
        /// </summary>
        internal static string Setting_DynamicHUDLoading_DisplayName {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDLoading_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls visibility of the Menu bar located in the upper-left of the screen..
        /// </summary>
        internal static string Setting_DynamicHUDMenuBar_Description {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDMenuBar_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Menu Bar.
        /// </summary>
        internal static string Setting_DynamicHUDMenuBar_DisplayName {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDMenuBar_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls visibility of the windows..
        /// </summary>
        internal static string Setting_DynamicHUDWindows_Description {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDWindows_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows.
        /// </summary>
        internal static string Setting_DynamicHUDWindows_DisplayName {
            get {
                return ResourceManager.GetString("Setting_DynamicHUDWindows_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide all of Blish interface for marvelous screenshots.
        /// </summary>
        internal static string Setting_HideInterfaceKeybind_Description {
            get {
                return ResourceManager.GetString("Setting_HideInterfaceKeybind_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide interface.
        /// </summary>
        internal static string Setting_HideInterfaceKeybind_DisplayName {
            get {
                return ResourceManager.GetString("Setting_HideInterfaceKeybind_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used for interacting with the environment.
        ///For the best experience set this to the same key as in the game..
        /// </summary>
        internal static string Setting_InteractKey_Description {
            get {
                return ResourceManager.GetString("Setting_InteractKey_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interact.
        /// </summary>
        internal static string Setting_InteractKey_DisplayName {
            get {
                return ResourceManager.GetString("Setting_InteractKey_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, Blish HUD will be shown in the taskbar while running..
        /// </summary>
        internal static string Setting_ShowInTaskbar_Description {
            get {
                return ResourceManager.GetString("Setting_ShowInTaskbar_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show in Taskbar.
        /// </summary>
        internal static string Setting_ShowInTaskbar_DisplayName {
            get {
                return ResourceManager.GetString("Setting_ShowInTaskbar_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, prerelease versions of both modules and Blish HUD itself become available through the interface.
        ///
        ///WARNING: Prerelease modules or Blish HUD versions may be unstable.  By enabling this feature, you acknowledge that you&apos;d like to be a guinea pig.  Do not use prerelease modules / versions of Blish HUD unless you&apos;re willing to experience crashes, bugs, or other issues..
        /// </summary>
        internal static string Setting_ShowPreviews_Description {
            get {
                return ResourceManager.GetString("Setting_ShowPreviews_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preview Releases.
        /// </summary>
        internal static string Setting_ShowPreviews_DisplayName {
            get {
                return ResourceManager.GetString("Setting_ShowPreviews_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  (Disabled because you launched Blish HUD with --startgw2, --pid, -g, or -P).
        /// </summary>
        internal static string Setting_StayInTray_AppendDisabled {
            get {
                return ResourceManager.GetString("Setting_StayInTray_AppendDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, Blish HUD will automatically minimize when GW2 closes and will continue running until GW2 is launched again.
        ///You can also use the Blish HUD icon in the tray to launch Guild Wars 2..
        /// </summary>
        internal static string Setting_StayInTray_Description {
            get {
                return ResourceManager.GetString("Setting_StayInTray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimize to tray when Guild Wars 2 Closes..
        /// </summary>
        internal static string Setting_StayInTray_DisplayName {
            get {
                return ResourceManager.GetString("Setting_StayInTray_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set keybind to toggle the main window of Blish HUD.
        /// </summary>
        internal static string Setting_ToggleBlishWindowKeybind_Description {
            get {
                return ResourceManager.GetString("Setting_ToggleBlishWindowKeybind_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle Blish HUD window.
        /// </summary>
        internal static string Setting_ToggleBlishWindowKeybind_DisplayName {
            get {
                return ResourceManager.GetString("Setting_ToggleBlishWindowKeybind_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled, Blish HUD will adjust it&apos;s volume to the game audio..
        /// </summary>
        internal static string Setting_UseGameVolume_Description {
            get {
                return ResourceManager.GetString("Setting_UseGameVolume_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Game Volume.
        /// </summary>
        internal static string Setting_UseGameVolume_DisplayName {
            get {
                return ResourceManager.GetString("Setting_UseGameVolume_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the volume of Blish HUD. Only has an effect when &apos;Use Game Volume&apos; is deactivated..
        /// </summary>
        internal static string Setting_Volume_Description {
            get {
                return ResourceManager.GetString("Setting_Volume_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volume.
        /// </summary>
        internal static string Setting_Volume_DisplayName {
            get {
                return ResourceManager.GetString("Setting_Volume_DisplayName", resourceCulture);
            }
        }
    }
}
